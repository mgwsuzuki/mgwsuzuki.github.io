<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: V6pi | like a /dev/null]]></title>
  <link href="http://mgwsuzuki.github.io/blog/categories/v6pi/atom.xml" rel="self"/>
  <link href="http://mgwsuzuki.github.io/"/>
  <updated>2014-05-06T19:01:29+09:00</updated>
  <id>http://mgwsuzuki.github.io/</id>
  <author>
    <name><![CDATA[mgwsuzuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[コマンドラインでgdb]]></title>
    <link href="http://mgwsuzuki.github.io/blog/2014/05/06/gdb/"/>
    <updated>2014-05-06T18:19:10+09:00</updated>
    <id>http://mgwsuzuki.github.io/blog/2014/05/06/gdb</id>
    <content type="html"><![CDATA[<p>コマンドラインからgdbを使ってRasPiに実行イメージをロードして実行してみた。</p>

<!-- more -->


<p>gdbはもっぱらeclipseから使っているけど、コマンドラインから使う方法を一応調べてみた。</p>

<p><a href="http://qiita.com/yamanekko/items/3b1eae1934c4ead618cf">mrubyをRaspberry Pi(bare metal)で動かす: Windows編</a>にあった通りに環境を構築していて、主なツールは以下のとおり。</p>

<ul>
<li>OpenOCD</li>
<li>YAGARTO</li>
</ul>


<p>それぞれインストールしたディレクトリを$(OPENOCD), $(YAGARTO)とする。</p>

<p>ARM用のgdbはYAGARTOに含まれていて、これとJTAGツールを接続するためにOpenOCDがある。関係を図にすると以下のような感じ。</p>

<p><img src="/images/20140506_gdb_openocd_raspi.png" alt="" /></p>

<p>RasPiのSDカードにはmruby(略)のサイトにあったとおり、JTAGデバッグに必要なファイルをコピーしておく。</p>

<h1>OpenOCDの起動</h1>

<p>コマンドは以下の通り。</p>

<pre><code>$(OPENOCD)/bin/openocd-0.7.0.exe -f $(OPENOCD)/scripts/interface/olimex-arm-usb-tiny-h.cfg -f ./raspi.cfg
</code></pre>

<p>なお、OpenOCDを起動する前にRasPiの電源を投入し、JTAGツールをUSBで接続しておく。</p>

<p>raspi.cfgはmruby(略)のサイトの手順通りに作業するとどこかのリポジトリから取得される。raspiプロジェクトを作成するところだったかな。</p>

<p>無事起動すると以下のようなメッセージがでる。</p>

<pre><code>Open On-Chip Debugger 0.7.0 (2013-05-05-10:41)
Licensed under GNU GPL v2
For bug reports, read
        http://openocd.sourceforge.net/doc/doxygen/bugs.html
Info : only one transport option; autoselect 'jtag'
adapter speed: 1000 kHz
none separate
raspi.arm
Info : max TCK change to: 30000 kHz
Info : clock speed 1000 kHz
Info : JTAG tap: raspi.arm tap/device found: 0x07b7617f (mfg: 0x0bf, part: 0x7b76, ver: 0x0)
Info : found ARM1176
Info : raspi.arm: hardware has 6 breakpoints, 2 watchpoints
</code></pre>

<p>OpenOCDは自分自身の制御のために4444ポートにtelnetで接続できる。</p>

<p>ほとんど使うことは無いと思ったが、実はgdbを接続したときにARMが動作しているとgdbが何もできないという状態になる。</p>

<p>ということで、telnetなり、他のツールを使ってlocalhost:4444に接続し、haltコマンドを実行しておく。</p>

<h1>gdbの起動</h1>

<p>起動の前に、実行したいプログラムのelfファイルをtarget.elfとして作業ディレクトリにコピーしておく。ここではv6piのgpioのそれをコピーした。うまく実行できればACT LEDが点滅する。</p>

<p>gdbの起動コマンドは以下の通り。</p>

<pre><code>$(YAGARTO)/bin/arm-none-eabi-gdb.exe target.elf
</code></pre>

<p>続いて以下のコマンドを入力する。</p>

<pre><code>target remote localhost:3333
load
</code></pre>

<p>後はnextとかstepとかlistとかでステップ実行できる。適当にこれらコマンドを実行したログは以下の通り。なお、nはnext, lはlistの略コマンド。</p>

<pre><code>(gdb) target remote localhost:3333
Remote debugging using localhost:3333
vp_gpio_set_fsel (portnum=743516865, fsel=VP_GPIO_FSEL_INPUT) at vp_gpio.c:45
45        }else if (portnum &lt; 54){
(gdb) load
Loading section .text, size 0x2f8 lma 0x8000
Start address 0x8000, load size 760
Transfer rate: 6080 bits in &lt;1 sec, 760 bytes/write.
(gdb) n
Single stepping until exit from function _start,
which has no line number information.
stepi ignored. GDB will now fetch the register state from the target.

Program received signal SIGINT, Interrupt.
0x00008000 in _start ()
(gdb) n
Single stepping until exit from function _start,
which has no line number information.
0x00008040 in reset_handler ()
(gdb) n
Single stepping until exit from function reset_handler,
which has no line number information.
main () at main.c:21
21      int main(){
(gdb) n
24        vp_gpio_set_fsel(16, VP_GPIO_FSEL_OUTPUT);
(gdb) l
19      }
20
21      int main(){
22        u32_t n;
23        // ACT LEDのピンをoutputにする
24        vp_gpio_set_fsel(16, VP_GPIO_FSEL_OUTPUT);
25
26        while(1){
27          vp_gpio_clear_output(16);
28          delay();
(gdb) n
27          vp_gpio_clear_output(16);
(gdb) n
28          delay();
(gdb) n
29          vp_gpio_set_output(16);
(gdb)
</code></pre>

<p>ステップ実行じゃなくて、ブレークポイントに達するまで実行するのはcontinueコマンドである。ブレークポイントを指定してなかったら永遠に実行しつづける。</p>

<p>continueから抜ける方法を調べようとしたところで疲れたので終了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[作業環境]]></title>
    <link href="http://mgwsuzuki.github.io/blog/2014/05/05/environment/"/>
    <updated>2014-05-05T14:39:34+09:00</updated>
    <id>http://mgwsuzuki.github.io/blog/2014/05/05/environment</id>
    <content type="html"><![CDATA[<p>OSもなしにプログラムをRasPiに実行させる必要がある。SDカードから実行イメージをロードさせる方法もあるのだが、プログラムを書き換えるたびにいちいちSDカードを挿し替えてコピーして、というのは効率が悪い。</p>

<!-- more -->


<p>いわゆる組み込み系ではJTAGを使って実行イメージをターゲットに書き込んだりデバッグするのが普通である。ということで、RasPiに使えるJTAGツールを通販で購入した。OlimexのARM-USB-TINY-Hというものである。</p>

<p>これをRasPiのピンヘッダに挿すわけだが、信号配置が違うのでそのまま挿せるわけではない。なのでブレッドボードで使うようなジャンパーコードでつなぐわけだが、抜けてしまったときに間違ったピンに接続するケースが間違いなく起こるので、手元にあるパーツを使って専用のケーブルを作った。</p>

<p><img src="/images/20140408_baremetal.jpg" alt="" /></p>

<p>こうするとまず間違えないから安心して使うことができる。</p>

<p>余談だが、とある作業でRasPiのピン接続を間違って1台お釈迦にしたことがある。間違いに電源ピンが絡むと壊れる可能性がぐっと高くなるので注意である。</p>

<p>ちなみに右下のボードはUSBシリアルである。この手の開発には必須なので、あらかじめ用意してある。</p>

<p>母艦のソフトウェアはeclipseを使うことにした。といっても、それでコーディングすることはなく、JTAGを経由した実行イメージのロードとデバッグがメインである。</p>

<p>その方法が非常によくまとめられていたサイトがあって、参考にさせて頂いた。</p>

<p><a href="http://qiita.com/yamanekko/items/3b1eae1934c4ead618cf">mrubyをRaspberry Pi(bare metal)で動かす: Windows編</a></p>

<p>RasPiとJTAGツールの結線情報も書かれている。</p>

<p>たぶんeclipseを使わずにgdbをベタで使っても同じことが出来るのだろう。ストイックで自分には出来ないけど。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[V6piはじめました]]></title>
    <link href="http://mgwsuzuki.github.io/blog/2014/05/04/v6pi/"/>
    <updated>2014-05-04T19:43:00+09:00</updated>
    <id>http://mgwsuzuki.github.io/blog/2014/05/04/v6pi</id>
    <content type="html"><![CDATA[<p>ちょっと前からいわゆるLion本を買って勉強会みたいなのをやって半分くらい理解したけど、これをARMに移植したら面白いだろうか? と考え始めてやることにした。</p>

<!-- more -->


<p>とりあえずgithubにリポジトリを作ってみた。</p>

<p><a href="https://github.com/mgwsuzuki/v6pi">https://github.com/mgwsuzuki/v6pi</a></p>

<p>V6 UNIXを移植するわけだけど、別にV6 UNIXが使いたいからじゃない。ただもう少しV6 UNIXを知りたい。</p>

<p>また、V6 UNIXが動いていたPDP11に興味があるわけじゃないから、そのハードを作ったり、エミュレータを作るのもあまり興味がない。それよりも現在よく使われているARMのほうがよっぽど興味がある。</p>

<p>そんなわけで、V6 UNIXとARMの勉強をいっぺんにやってしまおうというのが目的だったりする。</p>

<p>今のところV6 UNIXどころじゃなくて、CPUのブートからCのmain関数がコールできるまでのコードを整備したり、GPIOのピン設定の簡易ライブラリが出来上がってる程度である。</p>

<p>これからの予定として、V6 UNIXをすぐに移植するというより、ARMのMMUの使い方を調べたりするのがしばらく続くと思う。</p>

<p>自分が理解することが最優先なので、進捗はとても遅いはずである。</p>
]]></content>
  </entry>
  
</feed>
