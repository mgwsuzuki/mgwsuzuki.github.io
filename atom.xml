<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[like a /dev/null]]></title>
  <link href="http://mgwsuzuki.github.io/atom.xml" rel="self"/>
  <link href="http://mgwsuzuki.github.io/"/>
  <updated>2014-05-29T00:41:04+09:00</updated>
  <id>http://mgwsuzuki.github.io/</id>
  <author>
    <name><![CDATA[mgwsuzuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gpioなコード]]></title>
    <link href="http://mgwsuzuki.github.io/blog/2014/05/28/gpio/"/>
    <updated>2014-05-28T23:21:33+09:00</updated>
    <id>http://mgwsuzuki.github.io/blog/2014/05/28/gpio</id>
    <content type="html"><![CDATA[<p>General Purpose I/O。RasPiに限らず、最近のマイコンは機能を減らすことなくピンの数を抑える工夫がある。</p>

<p>それ以外にも、チップの外につけるパーツを減らせるようになっている。</p>

<!-- more -->


<p>参照したドキュメントはSoC-Peripherals.pdfで、6節にGPIOの説明がある。</p>

<p>GPIOなソースコードはこちら:
<a href="https://github.com/mgwsuzuki/v6pi/tree/master/base">https://github.com/mgwsuzuki/v6pi/tree/master/base</a></p>

<h1>ピンの機能設定</h1>

<p>SoCに内蔵される機能は多いほど応用が広がるわけだが、それはつまり入力または出力のピン数の増加を意味する。</p>

<p>とは言っても、チップの外に出せるピンの数は有限であり、またユーザがすべての機能を使うわけでもないので、機能ごとに専用のピンを割り当てるのは非効率である。</p>

<p>そんなわけでRasPiでは、1つのピンに対して複数の機能をマルチプレクスし、ユーザにそれを選択してもらうようになっている。</p>

<p>vp_gpio.hでは以下のようなコードでピンの機能選択ができる。</p>

<pre><code>// function select
typedef enum {
  VP_GPIO_FSEL_INPUT  = 0,
  VP_GPIO_FSEL_OUTPUT = 1,
  VP_GPIO_FSEL_ALT0   = 4,
  VP_GPIO_FSEL_ALT1   = 5,
  VP_GPIO_FSEL_ALT2   = 6,
  VP_GPIO_FSEL_ALT3   = 7,
  VP_GPIO_FSEL_ALT4   = 3,
  VP_GPIO_FSEL_ALT5   = 2
} vp_gpio_fsel_t;

// 指定された番号のGPIOピンのfunctionをセットする
void vp_gpio_set_fsel(i32_t portnum, vp_gpio_fsel_t fsel);
</code></pre>

<p>vp_gpio_fsel_tの意味はSoC-Peripherals.pdfをみれば分かると思う。</p>

<h1>出力ピンのレベル指定</h1>

<p>GPIOを出力ピンとしたとき、出力したい値を設定するために以下の2つの関数を用意した。</p>

<pre><code>// 指定された番号のGPIOピンの出力を1にする
void vp_gpio_set_output(i32_t portnum);

// 指定された番号のGPIOピンの出力を0にする
void vp_gpio_clear_output(i32_t portnum);
</code></pre>

<p>これはGPSETnまたはGPCLRnレジスタを叩くだけの関数である。</p>

<p>上記のように、RasPiではピンの出力を1にするか0にするかの2つしか持っていないようだが、マイコンによっては設定したい値そのものを指定できるレジスタや、ピン出力を反転するためのレジスタを持つものもある。</p>

<p>特に設定したい値そのものを指定できるレジスタは必須と思っていたけど、RasPiはそうではないようだ。ということで、それが出来る関数を用意してみた。</p>

<pre><code>// 指定された番号のGPIOピンのレベルをセットする
void vp_gpio_set_level(i32_t portnum, u32_t level);
</code></pre>

<h1>入力ピンの状態を知る</h1>

<p>GPIOを入力ピンとしたとき、ピンの状態を知るために以下の関数を用意した。</p>

<pre><code>// 指定された番号のGPIOピンのレベルを返す
u32_t vp_gpio_get_level(i32_t portnum);
</code></pre>

<p>指定されたピンがHなら1、Lなら0を返す。</p>

<h1>プルアップとプルダウン</h1>

<p>RasPiでは、各ピンごとにプルアップ、プルダウン、プルアップ/ダウンなしを指定できる。ただ、その指定方法は変わっていて、</p>

<ul>
<li>GPPUDにモードを指定し</li>
<li>150clk待って</li>
<li>GPPUDCLKnの指定したいピンに対応するビットに1を書き込み</li>
<li>150clk待って</li>
<li>GPPUDCLKnの指定したいピンに対応するビットに0を書き込む</li>
</ul>


<p>という手順になっている。一見複雑に見えるが、LSI設計している人間にとってその狙いと回路構成が目に浮かぶのである。</p>

<p>150clk待つというのは正確には150clk以上待てばいいはずで、実装もそうしている。</p>

<p>ここで忘れていけないのは、最後のステップのGPPUDCLKnに0を書き込むところである。</p>

<p>GPPUDに書き込んだ値を記憶させるのに重要なことは、GPPUDCLKnを0から1に変化させることである。いわゆる立ち上がりエッジと言われるものだが、これを発生させるためにはGPPUDCLKnに1を書き込む前にその値が0になっていないといけない。</p>

<p>もし0を書き込むのを忘れて、別のピンのプルアップ/ダウンを設定しようとして1を書き込んでも、1から1への変化(というか変化していない)じゃ立ち上がりエッジは発生しない。</p>

<p>その結果、正しく設定できないということになる。</p>

<p>vp_gpio.hでは以下のコード及び関数でプルアップ/プルダウンを指定できる。</p>

<pre><code>// pull-up/down
typedef enum {
  VP_GPIO_PUD_OFF  = 0,
  VP_GPIO_PUD_DOWN = 1,
  VP_GPIO_PUD_UP   = 2
} vp_gpio_pud_t;

// 指定された番号のGPIOピンのpull-up/downをセットする
void vp_gpio_set_pud(i32_t portnum, vp_gpio_pud_t pud);
</code></pre>

<h1>プルアップ/プルダウンの使い分け</h1>

<p>そもそもプルアップとかプルダウンってなんのために使うのか、というのを理解しないといけない。</p>

<p>よくデジタル回路では0を示すのに0V、1を示すのに3.3Vとか2.5Vの電圧をかける、みたいに言われる。</p>

<p>がしかし、デジタル回路といってももとはアナログな振る舞いに支配されるわけで、そこには0でも1でもない状態が存在する。</p>

<p>1つの信号線を誰かが0Vや3.3Vに駆動していればいいのだが、実は誰も駆動していない、という状態が普通にある。例えば、USBなどのコネクタに何も挿さっていない場合を考えてみるとよい。</p>

<p>そのような、だれも駆動していない信号を入力したら、それは0になるのか、1になるのか?</p>

<p>答えは「分からない」とか「0や1にふらつく」である。</p>

<p>この「ふらつく」というのがかなり厄介で、例えばUARTなら1->0の変化でデータが到着したと判断するので、ふらつきはすなわち誤受信になる。割り込み信号ならふらつくたびに意図しない割り込みが発生する。</p>

<p>これは困るので、それを回避するためにプルアップ/プルダウンをする。</p>

<p>プルアップにしたら、誰も信号を駆動していないときに1になり、プルダウンにしたら、誰も信号を駆動していないときに0になる。もし誰かが信号を駆動したらプルアップ/プルダウンの指定に関係なく、駆動されたレベルになる。</p>

<p>つまり、主に入力ピンのための機能だと思えばよい。</p>

<p>出力ピンなら自らが0か1に駆動するから基本的にいらない。が、自ら「駆動しない」という使い方をするなら別だが、ちょっと割愛。</p>

<p>プルアップにするかプルダウンにするかは、そのピンの機能によりけりであり、誤動作しないように設定すればよい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baseなコード]]></title>
    <link href="http://mgwsuzuki.github.io/blog/2014/05/19/base/"/>
    <updated>2014-05-19T20:06:09+09:00</updated>
    <id>http://mgwsuzuki.github.io/blog/2014/05/19/base</id>
    <content type="html"><![CDATA[<p>OSなしのCPUで、どうやってCのmain関数の実行にたどりつくのか、というのは概念としては知っているけど、個々のCPUで手順は異なる。</p>

<p>&ldquo;OSなしのCPUで&#8221;などと書いたけど、OSの立ち上げだって同じ話だったりする。ブートローダーというキーワードで片付けられたりするけど。</p>

<p>ということで、電源投入からそれなりに正しい手順でmain関数を実行するまでのコードを作った。</p>

<!-- more -->


<p><a href="https://github.com/mgwsuzuki/v6pi/tree/master/base">https://github.com/mgwsuzuki/v6pi/tree/master/base</a></p>

<p>それなりに正しい手順だけど、テスト目的程度のレベルである。</p>

<h1>ベクタテーブル</h1>

<p>CPUは命令を実行している間に割り込みが入ったとき、ある特定のアドレスにジャンプしたり、特定のアドレスを読み出してそこにジャンプしたりする。このような動作を例外処理と呼び、割り込みは例外処理の1つである。</p>

<p>CPUの例外要因は1つではない。そのため、例外要因ごとに所望の処理ルーチンにジャンプするのを効率化するために、例外要因ごとに番号をつけ、それをインデックスとしたテーブルを作る。これをベクタテーブルなどと呼ぶ。</p>

<p>テーブルの中身はRasPiに使われているARMでは命令そのものである。ただ、CPUごとに実装はそれぞれでジャンプ先のアドレスだったりするものもある。</p>

<p>このテーブルのベースアドレスは0x0か、0xffff_0000を選べる。0xffff_0000はMMUを使ったOSで使用することを想定している。初期状態は0x0である。</p>

<p>ARMでは以下のようなテーブル定義となっている。</p>

<table>
<thead>
<tr>
<th align="left"> 開始アドレス </th>
<th align="left"> 例外/割り込み名</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> 0x0000_0000  </td>
<td align="left"> リセット</td>
</tr>
<tr>
<td align="left"> 0x0000_0004  </td>
<td align="left"> 未定義命令</td>
</tr>
<tr>
<td align="left"> 0x0000_0008  </td>
<td align="left"> ソフトウェア割り込み</td>
</tr>
<tr>
<td align="left"> 0x0000_000c  </td>
<td align="left"> プリフェッチアボート</td>
</tr>
<tr>
<td align="left"> 0x0000_0010  </td>
<td align="left"> データアボート</td>
</tr>
<tr>
<td align="left"> 0x0000_0014  </td>
<td align="left"> 予約</td>
</tr>
<tr>
<td align="left"> 0x0000_0018  </td>
<td align="left"> 割り込み要求</td>
</tr>
<tr>
<td align="left"> 0x0000_001c  </td>
<td align="left"> 高速割り込み要求</td>
</tr>
</tbody>
</table>


<p>このテーブルには命令を記述する必要があり、要するにアセンブラの命令を記述すればよい。ということでvector.sには次のようなコードを記述している。1命令あたり4byteなので、ぴったり8つの要素があるベクタテーブルとなる。</p>

<pre><code>_start:
    ldr     pc, htbl_reset
    ldr     pc, htbl_undef
    ldr     pc, htbl_swi
    ldr     pc, htbl_pabt
    ldr     pc, htbl_dabt
    ldr     pc, htbl_unused
    ldr     pc, htbl_irq
    ldr     pc, htbl_fiq
</code></pre>

<p>&ldquo;htblなんとか&#8221;から始まるラベルは次のようになっている。</p>

<pre><code>htbl_reset:
    .word   reset_handler
htbl_undef:
    .word   undef_handler
htbl_swi:
    .word   swi_handler
htbl_pabt:
    .word   pabt_handler
htbl_dabt:
    .word   dabt_handler
htbl_unused:
    .word   unused_handler
htbl_irq:
    .word   irq_handler
htbl_fiq:
    .word   fiq_handler
</code></pre>

<p>&ldquo;なんとかhandler&#8221;は例外処理ハンドラの開始アドレスである。つまり、ldr命令で&#8221;なんとかhandler&#8221;のアドレスをプログラムカウンタに読み込ませてジャンプする。</p>

<p>ちなみに、ldr命令ではなくてb命令でジャンプさせる方法もある。が、32MBより離れたアドレスに分岐できないし、後で説明する回避できない副作用があるため用いない。</p>

<h1>リセットハンドラ</h1>

<p>リセットハンドラの処理は以下のようになっている。</p>

<h2>ベクタテーブルのコピー</h2>

<p>名前の通り、電源投入直後やCPUがリセットされたときに実行されるコードである。vector.sでは次のとおり。</p>

<pre><code>        mov     r0, #0x8000
        mov     r1, #0x0000
        ldmia   r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
        stmia   r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
        ldmia   r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
        stmia   r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
</code></pre>

<p>やっていることは、0x8000から32byte分のデータを0x0にコピーしている。</p>

<p>実は、_startラベルから始まるベクタテーブルは、アドレス0x8000に配置されている。0x8000は何かというと、RasPiのARMが起動したときに実行が開始されるアドレスなのである。0x0でない。</p>

<p>これはRasPiに搭載されているSoC(及びメーカー配布のブートローダー)がそうなっているため、どうしようもない。だからベクタテーブルを0x8000に配置すれば電源投入直後だけはしのげる。</p>

<p>かといって、ARMのベクタテーブルの開始アドレスはやはり0x0である。なので、0x8000にあるままでは正しく動作しない。ということで、上記のコードで0x8000にあるベクタテーブルを0x0へコピーしている。</p>

<p>ここにベクタテーブルをb命令で記述できない理由がある。b命令はプログラムカウンタをベースとした相対アドレスで分岐先アドレスを決定するため、命令を別のアドレスに移動すると分岐先アドレスが狂ってしまうのである。</p>

<p>ldr命令もプログラムカウンタをベースとした相対アドレスで読み出しアドレスを決定するけど、読み出し先データも矛盾なくコピーするので問題ない。そして、読み出し先に書いてあるジャンプ先アドレスは絶対アドレスなので問題なくジャンプできる。</p>

<h2>モードとスタックポインタの設定</h2>

<p>ARMはCPUの動作モードして以下のようなものがある。</p>

<ul>
<li>アボート</li>
<li>高速割り込み要求</li>
<li>割り込み要求</li>
<li>スーパバイザ</li>
<li>システム</li>
<li>未定義</li>
<li>ユーザ</li>
</ul>


<p>これらはcpsr(レジスタ)の[4:0]に値を書き込むことで変更できる。といっても、書き込み権限のないモードになってしまうと書き込めない。</p>

<p>もうひとつ大切なことは、各モードごとにいくつかのレジスタが切り替わる、バンクレジスタとなっていて、スタックポインタもそれに含まれる。</p>

<p>現状のv6piではCPUモードを切り替えるようなレベルではないため、スーパバイザのみ設定しているが、例えば割り込みを使うようになったらそのモードにおけるスタックポインタを正しく設定する必要がある。</p>

<pre><code>        mov     r0, #(0x13|0xc0)
        msr     cpsr_c, r0
        mov     sp, #0x10000000
</code></pre>

<p>なお、上のコードでは割り込みを禁止している。</p>

<h2>メモリの初期化</h2>

<p>ブートローダーによって、SDカードから実行したいプログラムはすでにメモリに読み込まれているが、これを実行する前の準備が必要である。</p>

<p>1つは初期化データのコピー、もうひとつはBSS領域をゼロクリアすることである。</p>

<p>初期化データはプログラムが実行される前にメモリにセットされている値だが、これは.textの後ろに配置されていて、これを.dataの領域にコピーする必要がある。</p>

<pre><code>        ldr     r1, =__text_end__
        ldr     r2, =__data_start__
        ldr     r3, =__data_end__
1:      cmp     r2, r3
        ldrlo   r0, [r1], #4
        strlo   r0, [r2], #4
        blo     1b
</code></pre>

<p>このおかげで初期化データをプログラムが変更しても、リセットすることでもとの値へ復活させることができる。</p>

<p>bss領域は、初期値がゼロでなければいけない。ということでゼロクリアする。</p>

<pre><code>        mov     r0, #0
        ldr     r1, =__bss_start__
        ldr     r2, =__bss_end__
2:      cmp     r1, r2
        strlo   r0, [r1], #4
        blo     2b
</code></pre>

<p>なお、&#8221;__&ldquo;で始まるシンボルはmemmapに記述されており、リンカの処理で値が確定する。</p>

<h2>mainをコール</h2>

<p>ここでようやくmain関数をコールすることができる。</p>

<pre><code>        bl      main
</code></pre>

<p>書きながら気が付いたが、main関数から戻ってきたときの処理が入っていない。後で無限ループを追加しておこう。</p>

<h1>その他のハンドラ</h1>

<p>リセット以外のハンドラを記述するためのテンプレートである。現在は何も使っていないのですべて無限ループとなっているが、必要に応じて記述する。</p>

<pre><code>undef_handler:
        b       undef_handler
swi_handler:
        b       swi_handler
pabt_handler:
        b       pabt_handler
dabt_handler:
        b       dabt_handler
unused_handler:
        b       unused_handler
irq_handler:
        b       irq_handler
fiq_handler:
        b       fiq_handler
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RasPiの起動とarmjtag]]></title>
    <link href="http://mgwsuzuki.github.io/blog/2014/05/08/booting/"/>
    <updated>2014-05-08T19:36:36+09:00</updated>
    <id>http://mgwsuzuki.github.io/blog/2014/05/08/booting</id>
    <content type="html"><![CDATA[<p>Raspberry Piの電源を投入したらどのような手順で所望のプログラムが起動するか、そしてJTAGが使用可能になるのかを調べてみた。</p>

<!-- more -->


<h1>起動直後</h1>

<p><a href="http://qiita.com/yamanekko/items/3b1eae1934c4ead618cf">mrubyをRaspberry Pi(bare metal)で動かす: Windows編</a>の通りにJTAGを使えるように作業すると、SDカードに以下のファイルを用意することになる。</p>

<ul>
<li>bootcode.bin</li>
<li>start.elf</li>
<li>kernel.img</li>
</ul>


<p>これらのファイルが何か、というのを調べたところ、次のような情報があった。</p>

<p><a href="http://raspberrypi.stackexchange.com/questions/10489/how-does-raspberry-pi-boot">http://raspberrypi.stackexchange.com/questions/10489/how-does-raspberry-pi-boot</a></p>

<p>訳すとこんな感じだろうか。</p>

<hr />

<ul>
<li>RasPiの電源投入直後、ARMコアはoffでGPUコアがonにになっており、SDRAMはdisableである。</li>
<li>GPUはSoCに内蔵されている1st stage bootloaderの実行を開始する。1st stage bootloaderはSDカードを読み、2nd stage bootloader(bootcode.bin)をL2 cacheに読み出して実行する。</li>
<li>bootcode.binはSDRAMをenableにし、SDカードから3rd stage bootloader(loader.bin)をRAMに読み出して実行する。</li>
<li>loader.binはGPU firmware(start.elf)を読み出す。</li>
<li>start.elfはconfig.txt, cmdline.txt, kernel.imgを読み出す。</li>
</ul>


<p>loader.binは大してなにもしない。これは.elfファイルを扱うことができ、start.elfをメモリの最初に読み出すのに必要である(ARMはSDRAMをアドレス0番地から使用する)。</p>

<p>bootcode.binに.elf読み出し機能を追加する予定があり、そうなるとloader.binは不要になる。ただ、作業の優先度は低い。</p>

<hr />

<p>「電源投入直後、ARMコアがoffでGPUコアがonになっており」ってほんと? という気がして調べてみたけど、寄り道な気がしたので深追いしないことにした。</p>

<p>loader.binというのはSDカードにコピーしていないので、bootcode.binに取り込まれたのだろう。</p>

<p>読み込む実行イメージのファイル名はkernel.imgに固定されているようだ。</p>

<p>SDカードにcmdline.txtは用意していないけど、フォーマットは以下のようだ(自分は試していない)。</p>

<p><a href="http://elinux.org/RPiconfig">http://elinux.org/RPiconfig</a></p>

<p>kernel.imgを読み出した後は書かれていないけど、プログラムカウンタが0x8000にセットされる。なので、自分で作った実行イメージは必ず0x8000にリセットベクタ相当のコードがないといけない。</p>

<h1>armjtag</h1>

<p>SDカードにコピーされるkernel.imgはarmjtagと呼ばれているもので、以下から取得できる。</p>

<p><a href="https://github.com/dwelch67/raspberrypi/tree/master/armjtag">https://github.com/dwelch67/raspberrypi/tree/master/armjtag</a></p>

<p>ちなみにこのリポジトリにはbare metalでRasPiを使うための情報がかなり蓄積されていて、自分もちょこちょこ確認していたりする。</p>

<p>このarmjtagは何をやっているかというと、次のとおり。</p>

<ul>
<li>RasPiのピンヘッダにJTAGのピンがマッピングされるように設定</li>
<li>タイマを使い、無限ループでACT LEDを点滅させる</li>
</ul>


<p>GPIOは有限のピンに多数の機能をマッピングできるように、またボード設計におけるピン配置の柔軟性をあげるために、ピンごとにそれをどのように使いたいかを設定することができる。</p>

<p>単なる入力、出力ピンにすることもできるし、alternate functionとして6つ設定できるようになっている。ここらあたりはSoC-Peripherals.pdfの&#8221;6. General Purpose I/O&#8221;に書かれている。</p>

<p>というわけで、以下のようにGPIOにJTAGのピンを割り当てている。</p>

<table>
<thead>
<tr>
<th align="left"> GPIO   </th>
<th align="left"> JTAG    </th>
<th align="left"> func </th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> GPIO4  </td>
<td align="left"> ARM_TDI </td>
<td align="left"> ALT5 </td>
</tr>
<tr>
<td align="left"> GPIO22 </td>
<td align="left"> ARM_TRST</td>
<td align="left"> ALT4 </td>
</tr>
<tr>
<td align="left"> GPIO24 </td>
<td align="left"> ARM_TDO </td>
<td align="left"> ALT4 </td>
</tr>
<tr>
<td align="left"> GPIO25 </td>
<td align="left"> ARM_TCK </td>
<td align="left"> ALT4 </td>
</tr>
<tr>
<td align="left"> GPIO27 </td>
<td align="left"> ARM_TMS </td>
<td align="left"> ALT4 </td>
</tr>
</tbody>
</table>


<p>また、これらのピンのpull-up/downを無効にしている。でも、入力ピンは無接続に備えてpull-upかdownにしたほうが良い気がする。</p>

<p>後はLEDを点滅させるためにタイマを使っている。といっても割り込みを使っているわけじゃなく、動作させてカウンタ値を無限ループで確認し、所定の値になったらLEDをon/offしている。</p>

<p>なお、事前にLEDにつながっているGPIO16をoutputモードにしている。このピンをLにするとLEDが点灯し、HにするとLEDが消灯する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コマンドラインでgdb]]></title>
    <link href="http://mgwsuzuki.github.io/blog/2014/05/06/gdb/"/>
    <updated>2014-05-06T18:19:10+09:00</updated>
    <id>http://mgwsuzuki.github.io/blog/2014/05/06/gdb</id>
    <content type="html"><![CDATA[<p>コマンドラインからgdbを使ってRasPiに実行イメージをロードして実行してみた。</p>

<!-- more -->


<p>gdbはもっぱらeclipseから使っているけど、コマンドラインから使う方法を一応調べてみた。</p>

<p><a href="http://qiita.com/yamanekko/items/3b1eae1934c4ead618cf">mrubyをRaspberry Pi(bare metal)で動かす: Windows編</a>にあった通りに環境を構築していて、主なツールは以下のとおり。</p>

<ul>
<li>OpenOCD</li>
<li>YAGARTO</li>
</ul>


<p>それぞれインストールしたディレクトリを$(OPENOCD), $(YAGARTO)とする。</p>

<p>ARM用のgdbはYAGARTOに含まれていて、これとJTAGツールを接続するためにOpenOCDがある。関係を図にすると以下のような感じ。</p>

<p><img src="http://mgwsuzuki.github.io/images/20140506_gdb_openocd_raspi.png" alt="" /></p>

<p>RasPiのSDカードにはmruby(略)のサイトにあったとおり、JTAGデバッグに必要なファイルをコピーしておく。</p>

<h1>OpenOCDの起動</h1>

<p>コマンドは以下の通り。</p>

<pre><code>$(OPENOCD)/bin/openocd-0.7.0.exe -f $(OPENOCD)/scripts/interface/olimex-arm-usb-tiny-h.cfg -f ./raspi.cfg
</code></pre>

<p>なお、OpenOCDを起動する前にRasPiの電源を投入し、JTAGツールをUSBで接続しておく。</p>

<p>raspi.cfgはmruby(略)のサイトの手順通りに作業するとどこかのリポジトリから取得される。raspiプロジェクトを作成するところだったかな。</p>

<p>無事起動すると以下のようなメッセージがでる。</p>

<pre><code>Open On-Chip Debugger 0.7.0 (2013-05-05-10:41)
Licensed under GNU GPL v2
For bug reports, read
        http://openocd.sourceforge.net/doc/doxygen/bugs.html
Info : only one transport option; autoselect 'jtag'
adapter speed: 1000 kHz
none separate
raspi.arm
Info : max TCK change to: 30000 kHz
Info : clock speed 1000 kHz
Info : JTAG tap: raspi.arm tap/device found: 0x07b7617f (mfg: 0x0bf, part: 0x7b76, ver: 0x0)
Info : found ARM1176
Info : raspi.arm: hardware has 6 breakpoints, 2 watchpoints
</code></pre>

<p>OpenOCDは自分自身の制御のために4444ポートにtelnetで接続できる。</p>

<p>ほとんど使うことは無いと思ったが、実はgdbを接続したときにARMが動作しているとgdbが何もできないという状態になる。</p>

<p>ということで、telnetなり、他のツールを使ってlocalhost:4444に接続し、haltコマンドを実行しておく。</p>

<h1>gdbの起動</h1>

<p>起動の前に、実行したいプログラムのelfファイルをtarget.elfとして作業ディレクトリにコピーしておく。ここではv6piのgpioのそれをコピーした。うまく実行できればACT LEDが点滅する。</p>

<p>gdbの起動コマンドは以下の通り。</p>

<pre><code>$(YAGARTO)/bin/arm-none-eabi-gdb.exe target.elf
</code></pre>

<p>続いて以下のコマンドを入力する。</p>

<pre><code>target remote localhost:3333
load
</code></pre>

<p>後はnextとかstepとかlistとかでステップ実行できる。適当にこれらコマンドを実行したログは以下の通り。なお、nはnext, lはlistの略コマンド。</p>

<pre><code>(gdb) target remote localhost:3333
Remote debugging using localhost:3333
vp_gpio_set_fsel (portnum=743516865, fsel=VP_GPIO_FSEL_INPUT) at vp_gpio.c:45
45        }else if (portnum &lt; 54){
(gdb) load
Loading section .text, size 0x2f8 lma 0x8000
Start address 0x8000, load size 760
Transfer rate: 6080 bits in &lt;1 sec, 760 bytes/write.
(gdb) n
Single stepping until exit from function _start,
which has no line number information.
stepi ignored. GDB will now fetch the register state from the target.

Program received signal SIGINT, Interrupt.
0x00008000 in _start ()
(gdb) n
Single stepping until exit from function _start,
which has no line number information.
0x00008040 in reset_handler ()
(gdb) n
Single stepping until exit from function reset_handler,
which has no line number information.
main () at main.c:21
21      int main(){
(gdb) n
24        vp_gpio_set_fsel(16, VP_GPIO_FSEL_OUTPUT);
(gdb) l
19      }
20
21      int main(){
22        u32_t n;
23        // ACT LEDのピンをoutputにする
24        vp_gpio_set_fsel(16, VP_GPIO_FSEL_OUTPUT);
25
26        while(1){
27          vp_gpio_clear_output(16);
28          delay();
(gdb) n
27          vp_gpio_clear_output(16);
(gdb) n
28          delay();
(gdb) n
29          vp_gpio_set_output(16);
(gdb)
</code></pre>

<p>ステップ実行じゃなくて、ブレークポイントに達するまで実行するのはcontinueコマンドである。ブレークポイントを指定してなかったら永遠に実行しつづける。</p>

<p>continueから抜ける方法を調べようとしたところで疲れたので終了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[作業環境]]></title>
    <link href="http://mgwsuzuki.github.io/blog/2014/05/05/environment/"/>
    <updated>2014-05-05T14:39:34+09:00</updated>
    <id>http://mgwsuzuki.github.io/blog/2014/05/05/environment</id>
    <content type="html"><![CDATA[<p>OSもなしにプログラムをRasPiに実行させる必要がある。SDカードから実行イメージをロードさせる方法もあるのだが、プログラムを書き換えるたびにいちいちSDカードを挿し替えてコピーして、というのは効率が悪い。</p>

<!-- more -->


<p>いわゆる組み込み系ではJTAGを使って実行イメージをターゲットに書き込んだりデバッグするのが普通である。ということで、RasPiに使えるJTAGツールを通販で購入した。OlimexのARM-USB-TINY-Hというものである。</p>

<p>これをRasPiのピンヘッダに挿すわけだが、信号配置が違うのでそのまま挿せるわけではない。なのでブレッドボードで使うようなジャンパーコードでつなぐわけだが、抜けてしまったときに間違ったピンに接続するケースが間違いなく起こるので、手元にあるパーツを使って専用のケーブルを作った。</p>

<p><img src="http://mgwsuzuki.github.io/images/20140408_baremetal.jpg" alt="" /></p>

<p>こうするとまず間違えないから安心して使うことができる。</p>

<p>余談だが、とある作業でRasPiのピン接続を間違って1台お釈迦にしたことがある。間違いに電源ピンが絡むと壊れる可能性がぐっと高くなるので注意である。</p>

<p>ちなみに右下のボードはUSBシリアルである。この手の開発には必須なので、あらかじめ用意してある。</p>

<p>母艦のソフトウェアはeclipseを使うことにした。といっても、それでコーディングすることはなく、JTAGを経由した実行イメージのロードとデバッグがメインである。</p>

<p>その方法が非常によくまとめられていたサイトがあって、参考にさせて頂いた。</p>

<p><a href="http://qiita.com/yamanekko/items/3b1eae1934c4ead618cf">mrubyをRaspberry Pi(bare metal)で動かす: Windows編</a></p>

<p>RasPiとJTAGツールの結線情報も書かれている。</p>

<p>たぶんeclipseを使わずにgdbをベタで使っても同じことが出来るのだろう。ストイックで自分には出来ないけど。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[V6piはじめました]]></title>
    <link href="http://mgwsuzuki.github.io/blog/2014/05/04/v6pi/"/>
    <updated>2014-05-04T19:43:00+09:00</updated>
    <id>http://mgwsuzuki.github.io/blog/2014/05/04/v6pi</id>
    <content type="html"><![CDATA[<p>ちょっと前からいわゆるLion本を買って勉強会みたいなのをやって半分くらい理解したけど、これをARMに移植したら面白いだろうか? と考え始めてやることにした。</p>

<!-- more -->


<p>とりあえずgithubにリポジトリを作ってみた。</p>

<p><a href="https://github.com/mgwsuzuki/v6pi">https://github.com/mgwsuzuki/v6pi</a></p>

<p>V6 UNIXを移植するわけだけど、別にV6 UNIXが使いたいからじゃない。ただもう少しV6 UNIXを知りたい。</p>

<p>また、V6 UNIXが動いていたPDP11に興味があるわけじゃないから、そのハードを作ったり、エミュレータを作るのもあまり興味がない。それよりも現在よく使われているARMのほうがよっぽど興味がある。</p>

<p>そんなわけで、V6 UNIXとARMの勉強をいっぺんにやってしまおうというのが目的だったりする。</p>

<p>今のところV6 UNIXどころじゃなくて、CPUのブートからCのmain関数がコールできるまでのコードを整備したり、GPIOのピン設定の簡易ライブラリが出来上がってる程度である。</p>

<p>これからの予定として、V6 UNIXをすぐに移植するというより、ARMのMMUの使い方を調べたりするのがしばらく続くと思う。</p>

<p>自分が理解することが最優先なので、進捗はとても遅いはずである。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1st Post]]></title>
    <link href="http://mgwsuzuki.github.io/blog/2014/05/03/1st-post/"/>
    <updated>2014-05-03T23:00:48+09:00</updated>
    <id>http://mgwsuzuki.github.io/blog/2014/05/03/1st-post</id>
    <content type="html"><![CDATA[<p>伝言板に書かれた文字は消され、有用な情報やツールもいつかはクソと言われ、熱雑音のように嫌われるものだけが残る。そんな儚いモノたちの行き着く先みたいな場所。</p>
]]></content>
  </entry>
  
</feed>
